<style>
    .product-card {
        transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
        border: 1px solid #eee;
        border-radius: .5rem;
        overflow: hidden; /* Ensures the image corners are rounded */
    }
    .product-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 8px 20px rgba(0,0,0,0.12);
    }
    .product-image-container {
        aspect-ratio: 4 / 3;
        overflow: hidden;
    }
    .product-image-container img {
        width: 100%;
        height: 100%;
        object-fit: cover;
        transition: transform 0.3s ease;
    }
    .product-card:hover .product-image-container img {
        transform: scale(1.05);
    }
    .card-title {
        min-height: 3rem; /* Give titles a consistent height */
    }
    .card-text {
        flex-grow: 1; /* Make description take up space to align buttons at the bottom */
        color: #6c757d;
    }
    .product-card .btn {
        transition: all 0.2s;
    }
    #toastContainer {
        position: fixed;
        top: 1rem;
        right: 1rem;
        z-index: 1055;
    }
</style>

<div class="d-flex justify-content-between align-items-center mb-4">
    <h2>Sản phẩm</h2>
    <div class="dropdown">
        <button class="btn btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown">
            Danh mục
        </button>
        <ul class="dropdown-menu" id="categoryFilter">
            <li><a class="dropdown-item" href="#" data-category="">Tất cả</a></li>
        </ul>
    </div>
</div>

<div class="row" id="productList">
    <!-- Products will be loaded here -->
</div>

<nav aria-label="Page navigation">
    <ul class="pagination justify-content-center mt-4" id="paginationControls">
        <!-- Pagination controls will be inserted here -->
    </ul>
</nav>

<!-- Toast Container for notifications -->
<div id="toastContainer" class="position-fixed top-0 end-0 p-3" style="z-index: 11"></div>

<script>
let allProducts = [];
let categories = [];
let currentPage = 1;
let currentCategory = '';

async function loadProducts(page = 1, categoryId = '') {
    const productList = document.getElementById('productList');
    currentPage = page;
    currentCategory = categoryId;

    productList.innerHTML = `
        <div class="col text-center py-5">
            <div class="spinner-border text-primary" style="width: 3rem; height: 3rem;" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    `;
    try {
        let url = `/api/v1/products?page=${page}&limit=6`;
        if (categoryId) {
            url += `&category=${categoryId}`;
        }
        const response = await fetch(url);
        const result = await response.json();
        
        allProducts = result.data || [];
        displayProducts(allProducts);
        displayPagination(result.pagination);
    } catch (error) {
        console.error('Error loading products:', error);
        productList.innerHTML = `<div class="col"><p class="text-danger">Failed to load products.</p></div>`;
    }
}

async function loadCategories() {
    try {
        const response = await fetch('/api/v1/categories');
        const result = await response.json();
        categories = result.data || result;
        displayCategories();
    } catch (error) {
        console.error('Error loading categories:', error);
    }
}

function displayProducts(products) {
    const productList = document.getElementById('productList');
    productList.innerHTML = '';

    if (products.length === 0) {
        productList.innerHTML = `
            <div class="col">
                <div class="text-center py-5 bg-light rounded" style="margin-top: 2rem;">
                    <i class="fas fa-search fa-3x text-muted mb-3"></i>
                    <h4>Không tìm thấy sản phẩm</h4>
                    <p class="text-muted">Vui lòng thử chọn một danh mục khác.</p>
                </div>
            </div>
        `;
        return;
    }
    
    products.forEach(product => {
        const productCard = `
            <div class="col-md-4 mb-4">
                <div class="card product-card h-100">
                    <a href="/products/${product._id}" class="text-decoration-none text-dark">
                        <div class="product-image-container">
                            <img src="${product.image || 'https://via.placeholder.com/400x300.png?text=No+Image'}" class="card-img-top" alt="${product.name}">
                        </div>
                    </a>
                    <div class="card-body d-flex flex-column">
                        <h5 class="card-title"><a href="/products/${product._id}" class="text-decoration-none text-dark">${product.name}</a></h5>
                        <p class="card-text">${product.description || ''}</p>
                        <div class="mt-auto">
                            <div class="d-flex justify-content-between align-items-center">
                                <span class="h5 text-primary fw-bold">${formatPrice(product.price)}</span>
                                <span class="badge bg-light text-dark">Còn: ${product.stock}</span>
                            </div>
                            <div class="d-grid gap-2 mt-3">
                                <button class="btn btn-primary" onclick="addToCart('${product._id}', this)">
                                    <i class="fas fa-cart-plus me-1"></i> Thêm vào giỏ
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        `;
        productList.innerHTML += productCard;
    });
}

function displayCategories() {
    const categoryFilter = document.getElementById('categoryFilter');
    categoryFilter.innerHTML = '<li><a class="dropdown-item" href="#" data-category="">Tất cả</a></li>';
    
    console.log('Categories received by displayCategories:', categories);

    categories.forEach(category => {
        const categoryItem = `<li><a class="dropdown-item" href="#" data-category="${category._id}">${category.name}</a></li>`;
        categoryFilter.innerHTML += categoryItem;
    });
    
    // Add event listeners for category filtering
    categoryFilter.addEventListener('click', (e) => {
        if (e.target.classList.contains('dropdown-item')) {
            e.preventDefault();
            const categoryId = e.target.getAttribute('data-category');
            // Reset to page 1 when category changes
            loadProducts(1, categoryId);
        }
    });
}

function displayPagination(pagination) {
    const paginationControls = document.getElementById('paginationControls');
    if (!paginationControls || !pagination || pagination.totalPages <= 1) {
        paginationControls.innerHTML = '';
        return;
    }

    paginationControls.innerHTML = '';
    const { page, totalPages } = pagination;

    // Previous button
    const prevDisabled = page === 1 ? 'disabled' : '';
    paginationControls.innerHTML += `
        <li class="page-item ${prevDisabled}">
            <a class="page-link" href="#" onclick="loadProducts(${page - 1}, currentCategory)">Previous</a>
        </li>
    `;

    // Page numbers
    for (let i = 1; i <= totalPages; i++) {
        const active = i === page ? 'active' : '';
        paginationControls.innerHTML += `
            <li class="page-item ${active}">
                <a class="page-link" href="#" onclick="loadProducts(${i}, currentCategory)">${i}</a>
            </li>
        `;
    }

    // Next button
    const nextDisabled = page === totalPages ? 'disabled' : '';
    paginationControls.innerHTML += `
        <li class="page-item ${nextDisabled}">
            <a class="page-link" href="#" onclick="loadProducts(${page + 1}, currentCategory)">Next</a>
        </li>
    `;
}

function formatPrice(price) {
    if (typeof price !== 'number') return price;
    return new Intl.NumberFormat('vi-VN', { style: 'currency', currency: 'VND' }).format(price);
}

async function addToCart(productId, buttonElement) {
    const token = localStorage.getItem('token');
    if (!token) {
        showToast('Vui lòng đăng nhập để thêm sản phẩm!', 'error');
        setTimeout(() => { window.location.href = '/login'; }, 2000);
        return;
    }

    const originalHtml = buttonElement.innerHTML;
    buttonElement.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Đang thêm...';
    buttonElement.disabled = true;

    try {
        const response = await fetch('/api/v1/cart', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${token}`
            },
            body: JSON.stringify({ productId: productId, quantity: 1 })
        });

        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.message || 'Failed to add item to cart');
        }

        showToast('Đã thêm sản phẩm vào giỏ hàng!', 'success');
        buttonElement.innerHTML = '<i class="fas fa-check me-1"></i> Đã thêm';

        setTimeout(() => {
            buttonElement.innerHTML = originalHtml;
            buttonElement.disabled = false;
        }, 2000);

    } catch (error) {
        console.error('Error adding to cart:', error);
        showToast(`Lỗi: ${error.message}`, 'error');
        buttonElement.innerHTML = originalHtml;
        buttonElement.disabled = false;
    }
}

function showToast(message, type = 'success') {
    const toastContainer = document.getElementById('toastContainer');
    if (!toastContainer) return;

    const toastId = `toast-${Date.now()}`;
    const toastBg = type === 'success' ? 'bg-success' : 'bg-danger';

    const toastHTML = `
        <div id="${toastId}" class="toast align-items-center text-white ${toastBg} border-0" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="d-flex">
                <div class="toast-body">
                    ${message}
                </div>
                <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
            </div>
        </div>
    `;
    toastContainer.insertAdjacentHTML('beforeend', toastHTML);

    const toastElement = document.getElementById(toastId);
    const toast = new bootstrap.Toast(toastElement, { delay: 3000 });
    toast.show();
    toastElement.addEventListener('hidden.bs.toast', () => {
        toastElement.remove();
    });
}

// Load data on page load
document.addEventListener('DOMContentLoaded', () => {
    const urlParams = new URLSearchParams(window.location.search);
    const categoryId = urlParams.get('category') || '';
    const page = parseInt(urlParams.get('page')) || 1;
    loadProducts(page, categoryId);
    loadCategories();
});
</script>
