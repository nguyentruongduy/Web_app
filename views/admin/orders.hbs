<div class="d-flex justify-content-between align-items-center mb-4">
    <h2>Quản lý Đơn hàng</h2>
</div>

<div class="table-responsive">
    <table class="table table-hover table-striped">
        <thead>
            <tr>
                <th>Mã đơn hàng</th>
                <th>Người dùng</th>
                <th>Tổng tiền</th>
                <th>Địa chỉ giao hàng</th>
                <th>Phương thức thanh toán</th>
                <th>Trạng thái</th>
                <th>Ngày đặt</th>
                <th>Hành động</th>
            </tr>
        </thead>
        <tbody id="ordersTableBody">
            <!-- Order rows will be loaded here -->
        </tbody>
    </table>
</div>

<script>
async function loadOrders() {
    // No need to get token from localStorage; rely on HTTP-only cookie
    // const token = localStorage.getItem('token');
    try {
        const response = await fetch('/api/v1/admin/orders', {
            credentials: 'include' // Ensure cookies are sent
            // headers: {
            //     'Authorization': `Bearer ${token}`
            // }
        });
        const result = await response.json();
        // The orders API directly returns an array, not an object with a 'data' field
        const orders = result || [];
        displayOrders(orders);
    } catch (error) {
        console.error('Error loading orders:', error);
        alert('Không thể tải danh sách đơn hàng.');
    }
}

function displayOrders(orders) {
    const ordersTableBody = document.getElementById('ordersTableBody');
    ordersTableBody.innerHTML = '';
    orders.forEach(order => {
        const statusColor = getStatusColor(order.status);
        const statusText = getStatusText(order.status);
        const createdAt = new Date(order.createdAt).toLocaleDateString('vi-VN');

        const row = `
            <tr>
                <td>${order._id}</td>
                <td>${order.user?.name || 'N/A'} (${order.user?.email || 'N/A'})</td>
                <td>${formatPrice(order.totalAmount)}</td>
                <td>${order.shippingAddress}</td>
                <td>${order.paymentMethod}</td>
                <td><span class="badge bg-${statusColor}">${statusText}</span></td>
                <td>${createdAt}</td>
                <td>
                    <div class="dropdown">
                        <button class="btn btn-secondary btn-sm dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                            Cập nhật trạng thái
                        </button>
                        <ul class="dropdown-menu">
                            <li><a class="dropdown-item" href="#" onclick="updateOrderStatus('${order._id}', 'pending')">Chờ xử lý</a></li>
                            <li><a class="dropdown-item" href="#" onclick="updateOrderStatus('${order._id}', 'confirmed')">Đã xác nhận</a></li>
                            <li><a class="dropdown-item" href="#" onclick="updateOrderStatus('${order._id}', 'shipped')">Đang giao</a></li>
                            <li><a class="dropdown-item" href="#" onclick="updateOrderStatus('${order._id}', 'delivered')">Đã giao</a></li>
                            <li><a class="dropdown-item" href="#" onclick="updateOrderStatus('${order._id}', 'cancelled')">Đã hủy</a></li>
                        </ul>
                    </div>
                </td>
            </tr>
        `;
        ordersTableBody.innerHTML += row;
    });
}

async function updateOrderStatus(orderId, newStatus) {
    // No need to get token from localStorage; rely on HTTP-only cookie
    // const token = localStorage.getItem('token');
    try {
        const response = await fetch(`/api/v1/admin/orders/${orderId}/status`, {
            method: 'PATCH',
            headers: {
                'Content-Type': 'application/json'
                // 'Authorization': `Bearer ${token}`
            },
            credentials: 'include', // Ensure cookies are sent
            body: JSON.stringify({ status: newStatus })
        });
        const result = await response.json();
        if (response.ok) {
            alert(result.message || 'Cập nhật trạng thái đơn hàng thành công!');
            loadOrders(); // Reload orders list
        } else {
            alert(result.message || 'Cập nhật trạng thái đơn hàng thất bại.');
        }
    } catch (error) {
        console.error('Error updating order status:', error);
        alert('Có lỗi xảy ra. Vui lòng thử lại.');
    }
}

function getStatusColor(status) {
    const colors = {
        'pending': 'warning',
        'confirmed': 'info',
        'shipped': 'primary',
        'delivered': 'success',
        'cancelled': 'danger'
    };
    return colors[status] || 'secondary';
}

function getStatusText(status) {
    const texts = {
        'pending': 'Chờ xử lý',
        'confirmed': 'Đã xác nhận',
        'shipped': 'Đang giao',
        'delivered': 'Đã giao',
        'cancelled': 'Đã hủy'
    };
    return texts[status] || status;
}

// Initial load
document.addEventListener('DOMContentLoaded', () => {
    loadOrders();
});
</script> 